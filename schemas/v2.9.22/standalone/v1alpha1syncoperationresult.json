{
  "type": "object",
  "title": "SyncOperationResult represent result of sync operation",
  "properties": {
    "managedNamespaceMetadata": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "resources": {
      "type": "array",
      "title": "Resources contains a list of sync result items for each individual resource in a sync operation",
      "items": {
        "type": "object",
        "title": "ResourceResult holds the operation result details of a specific resource",
        "properties": {
          "group": {
            "type": "string",
            "title": "Group specifies the API group of the resource"
          },
          "hookPhase": {
            "description": "HookPhase contains the state of any operation associated with this resource OR hook\nThis can also contain values for non-hook resources.",
            "type": "string"
          },
          "hookType": {
            "type": "string",
            "title": "HookType specifies the type of the hook. Empty for non-hook resources"
          },
          "kind": {
            "type": "string",
            "title": "Kind specifies the API kind of the resource"
          },
          "message": {
            "type": "string",
            "title": "Message contains an informational or error message for the last sync OR operation"
          },
          "name": {
            "type": "string",
            "title": "Name specifies the name of the resource"
          },
          "namespace": {
            "type": "string",
            "title": "Namespace specifies the target namespace of the resource"
          },
          "status": {
            "type": "string",
            "title": "Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks"
          },
          "syncPhase": {
            "type": "string",
            "title": "SyncPhase indicates the particular phase of the sync that this result was acquired in"
          },
          "version": {
            "type": "string",
            "title": "Version specifies the API version of the resource"
          }
        }
      }
    },
    "revision": {
      "type": "string",
      "title": "Revision holds the revision this sync operation was performed to"
    },
    "revisions": {
      "type": "array",
      "title": "Revisions holds the revision this sync operation was performed for respective indexed source in sources field",
      "items": {
        "type": "string"
      }
    },
    "source": {
      "type": "object",
      "title": "ApplicationSource contains all required information about the source of an application",
      "properties": {
        "chart": {
          "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
          "type": "string"
        },
        "directory": {
          "type": "object",
          "title": "ApplicationSourceDirectory holds options for applications of type plain YAML or Jsonnet",
          "properties": {
            "exclude": {
              "type": "string",
              "title": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation"
            },
            "include": {
              "type": "string",
              "title": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation"
            },
            "jsonnet": {
              "type": "object",
              "title": "ApplicationSourceJsonnet holds options specific to applications of type Jsonnet",
              "properties": {
                "extVars": {
                  "type": "array",
                  "title": "ExtVars is a list of Jsonnet External Variables",
                  "items": {
                    "type": "object",
                    "title": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                    "properties": {
                      "code": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "libs": {
                  "type": "array",
                  "title": "Additional library search dirs",
                  "items": {
                    "type": "string"
                  }
                },
                "tlas": {
                  "type": "array",
                  "title": "TLAS is a list of Jsonnet Top-level Arguments",
                  "items": {
                    "type": "object",
                    "title": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                    "properties": {
                      "code": {
                        "type": "boolean"
                      },
                      "name": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "recurse": {
              "type": "boolean",
              "title": "Recurse specifies whether to scan a directory recursively for manifests"
            }
          }
        },
        "helm": {
          "type": "object",
          "title": "ApplicationSourceHelm holds helm specific options",
          "properties": {
            "fileParameters": {
              "type": "array",
              "title": "FileParameters are file parameters to the helm template",
              "items": {
                "type": "object",
                "title": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                "properties": {
                  "name": {
                    "type": "string",
                    "title": "Name is the name of the Helm parameter"
                  },
                  "path": {
                    "type": "string",
                    "title": "Path is the path to the file containing the values for the Helm parameter"
                  }
                }
              }
            },
            "ignoreMissingValueFiles": {
              "type": "boolean",
              "title": "IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values"
            },
            "parameters": {
              "type": "array",
              "title": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
              "items": {
                "type": "object",
                "title": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                "properties": {
                  "forceString": {
                    "type": "boolean",
                    "title": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings"
                  },
                  "name": {
                    "type": "string",
                    "title": "Name is the name of the Helm parameter"
                  },
                  "value": {
                    "type": "string",
                    "title": "Value is the value for the Helm parameter"
                  }
                }
              }
            },
            "passCredentials": {
              "type": "boolean",
              "title": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)"
            },
            "releaseName": {
              "type": "string",
              "title": "ReleaseName is the Helm release name to use. If omitted it will use the application name"
            },
            "skipCrds": {
              "type": "boolean",
              "title": "SkipCrds skips custom resource definition installation step (Helm's --skip-crds)"
            },
            "valueFiles": {
              "type": "array",
              "title": "ValuesFiles is a list of Helm value files to use when generating a template",
              "items": {
                "type": "string"
              }
            },
            "values": {
              "type": "string",
              "title": "Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.\n+patchStrategy=replace"
            },
            "valuesObject": {
              "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned\nstruct, and Object in your internal struct. You also need to register your\nvarious plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into\nyour external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.\nThe next step is to copy (using pkg/conversion) into the internal struct. The runtime\npackage's DefaultScheme has conversion functions installed which will unpack the\nJSON stored in RawExtension, turning it into the correct object type, and storing it\nin the Object. (TODO: In the case where the object is of an unknown type, a\nruntime.Unknown object will be created and stored.)\n\n+k8s:deepcopy-gen=true\n+protobuf=true\n+k8s:openapi-gen=true",
              "type": "object",
              "properties": {
                "raw": {
                  "description": "Raw is the underlying serialization of this object.\n\nTODO: Determine how to detect ContentType and ContentEncoding of 'Raw' data.",
                  "type": "string",
                  "format": "byte"
                }
              }
            },
            "version": {
              "type": "string",
              "title": "Version is the Helm version to use for templating (\"3\")"
            }
          }
        },
        "kustomize": {
          "type": "object",
          "title": "ApplicationSourceKustomize holds options specific to an Application source specific to Kustomize",
          "properties": {
            "commonAnnotations": {
              "type": "object",
              "title": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
              "additionalProperties": {
                "type": "string"
              }
            },
            "commonAnnotationsEnvsubst": {
              "type": "boolean",
              "title": "CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values"
            },
            "commonLabels": {
              "type": "object",
              "title": "CommonLabels is a list of additional labels to add to rendered manifests",
              "additionalProperties": {
                "type": "string"
              }
            },
            "forceCommonAnnotations": {
              "type": "boolean",
              "title": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps"
            },
            "forceCommonLabels": {
              "type": "boolean",
              "title": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps"
            },
            "images": {
              "type": "array",
              "title": "Images is a list of Kustomize image override specifications",
              "items": {
                "type": "string"
              }
            },
            "namePrefix": {
              "type": "string",
              "title": "NamePrefix is a prefix appended to resources for Kustomize apps"
            },
            "nameSuffix": {
              "type": "string",
              "title": "NameSuffix is a suffix appended to resources for Kustomize apps"
            },
            "namespace": {
              "type": "string",
              "title": "Namespace sets the namespace that Kustomize adds to all resources"
            },
            "patches": {
              "type": "array",
              "title": "Patches is a list of Kustomize patches",
              "items": {
                "type": "object",
                "properties": {
                  "options": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "boolean"
                    }
                  },
                  "patch": {
                    "type": "string"
                  },
                  "path": {
                    "type": "string"
                  },
                  "target": {
                    "type": "object",
                    "properties": {
                      "annotationSelector": {
                        "type": "string"
                      },
                      "labelSelector": {
                        "type": "string"
                      },
                      "resId": {
                        "type": "object",
                        "properties": {
                          "gvk": {
                            "type": "object",
                            "properties": {
                              "group": {
                                "type": "string"
                              },
                              "kind": {
                                "type": "string"
                              },
                              "version": {
                                "type": "string"
                              }
                            }
                          },
                          "name": {
                            "type": "string"
                          },
                          "namespace": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "replicas": {
              "type": "array",
              "title": "Replicas is a list of Kustomize Replicas override specifications",
              "items": {
                "type": "object",
                "properties": {
                  "count": {
                    "description": "+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true",
                    "type": "object",
                    "title": "IntOrString is a type that can hold an int32 or a string.  When used in\nJSON or YAML marshalling and unmarshalling, it produces or consumes the\ninner type.  This allows you to have, for example, a JSON field that can\naccept a name or number.\nTODO: Rename to Int32OrString",
                    "properties": {
                      "intVal": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "strVal": {
                        "type": "string"
                      },
                      "type": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  "name": {
                    "type": "string",
                    "title": "Name of Deployment or StatefulSet"
                  }
                }
              }
            },
            "version": {
              "type": "string",
              "title": "Version controls which version of Kustomize to use for rendering manifests"
            }
          }
        },
        "path": {
          "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
          "type": "string"
        },
        "plugin": {
          "type": "object",
          "title": "ApplicationSourcePlugin holds options specific to config management plugins",
          "properties": {
            "env": {
              "type": "array",
              "items": {
                "type": "object",
                "title": "EnvEntry represents an entry in the application's environment",
                "properties": {
                  "name": {
                    "type": "string",
                    "title": "Name is the name of the variable, usually expressed in uppercase"
                  },
                  "value": {
                    "type": "string",
                    "title": "Value is the value of the variable"
                  }
                }
              }
            },
            "name": {
              "type": "string"
            },
            "parameters": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "array": {
                    "description": "Array is the value of an array type parameter.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "map": {
                    "description": "Map is the value of a map type parameter.",
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  },
                  "name": {
                    "description": "Name is the name identifying a parameter.",
                    "type": "string"
                  },
                  "string": {
                    "description": "String_ is the value of a string type parameter.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "ref": {
          "description": "Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.",
          "type": "string"
        },
        "repoURL": {
          "type": "string",
          "title": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests"
        },
        "targetRevision": {
          "description": "TargetRevision defines the revision of the source to sync the application to.\nIn case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.\nIn case of Helm, this is a semver tag for the Chart's version.",
          "type": "string"
        }
      }
    },
    "sources": {
      "type": "array",
      "title": "Source records the application source information of the sync, used for comparing auto-sync",
      "items": {
        "type": "object",
        "title": "ApplicationSource contains all required information about the source of an application",
        "properties": {
          "chart": {
            "description": "Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.",
            "type": "string"
          },
          "directory": {
            "type": "object",
            "title": "ApplicationSourceDirectory holds options for applications of type plain YAML or Jsonnet",
            "properties": {
              "exclude": {
                "type": "string",
                "title": "Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation"
              },
              "include": {
                "type": "string",
                "title": "Include contains a glob pattern to match paths against that should be explicitly included during manifest generation"
              },
              "jsonnet": {
                "type": "object",
                "title": "ApplicationSourceJsonnet holds options specific to applications of type Jsonnet",
                "properties": {
                  "extVars": {
                    "type": "array",
                    "title": "ExtVars is a list of Jsonnet External Variables",
                    "items": {
                      "type": "object",
                      "title": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                      "properties": {
                        "code": {
                          "type": "boolean"
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "libs": {
                    "type": "array",
                    "title": "Additional library search dirs",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tlas": {
                    "type": "array",
                    "title": "TLAS is a list of Jsonnet Top-level Arguments",
                    "items": {
                      "type": "object",
                      "title": "JsonnetVar represents a variable to be passed to jsonnet during manifest generation",
                      "properties": {
                        "code": {
                          "type": "boolean"
                        },
                        "name": {
                          "type": "string"
                        },
                        "value": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              },
              "recurse": {
                "type": "boolean",
                "title": "Recurse specifies whether to scan a directory recursively for manifests"
              }
            }
          },
          "helm": {
            "type": "object",
            "title": "ApplicationSourceHelm holds helm specific options",
            "properties": {
              "fileParameters": {
                "type": "array",
                "title": "FileParameters are file parameters to the helm template",
                "items": {
                  "type": "object",
                  "title": "HelmFileParameter is a file parameter that's passed to helm template during manifest generation",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "Name is the name of the Helm parameter"
                    },
                    "path": {
                      "type": "string",
                      "title": "Path is the path to the file containing the values for the Helm parameter"
                    }
                  }
                }
              },
              "ignoreMissingValueFiles": {
                "type": "boolean",
                "title": "IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values"
              },
              "parameters": {
                "type": "array",
                "title": "Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation",
                "items": {
                  "type": "object",
                  "title": "HelmParameter is a parameter that's passed to helm template during manifest generation",
                  "properties": {
                    "forceString": {
                      "type": "boolean",
                      "title": "ForceString determines whether to tell Helm to interpret booleans and numbers as strings"
                    },
                    "name": {
                      "type": "string",
                      "title": "Name is the name of the Helm parameter"
                    },
                    "value": {
                      "type": "string",
                      "title": "Value is the value for the Helm parameter"
                    }
                  }
                }
              },
              "passCredentials": {
                "type": "boolean",
                "title": "PassCredentials pass credentials to all domains (Helm's --pass-credentials)"
              },
              "releaseName": {
                "type": "string",
                "title": "ReleaseName is the Helm release name to use. If omitted it will use the application name"
              },
              "skipCrds": {
                "type": "boolean",
                "title": "SkipCrds skips custom resource definition installation step (Helm's --skip-crds)"
              },
              "valueFiles": {
                "type": "array",
                "title": "ValuesFiles is a list of Helm value files to use when generating a template",
                "items": {
                  "type": "string"
                }
              },
              "values": {
                "type": "string",
                "title": "Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.\n+patchStrategy=replace"
              },
              "valuesObject": {
                "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned\nstruct, and Object in your internal struct. You also need to register your\nvarious plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into\nyour external MyAPIObject. That causes the raw JSON to be stored, but not unpacked.\nThe next step is to copy (using pkg/conversion) into the internal struct. The runtime\npackage's DefaultScheme has conversion functions installed which will unpack the\nJSON stored in RawExtension, turning it into the correct object type, and storing it\nin the Object. (TODO: In the case where the object is of an unknown type, a\nruntime.Unknown object will be created and stored.)\n\n+k8s:deepcopy-gen=true\n+protobuf=true\n+k8s:openapi-gen=true",
                "type": "object",
                "properties": {
                  "raw": {
                    "description": "Raw is the underlying serialization of this object.\n\nTODO: Determine how to detect ContentType and ContentEncoding of 'Raw' data.",
                    "type": "string",
                    "format": "byte"
                  }
                }
              },
              "version": {
                "type": "string",
                "title": "Version is the Helm version to use for templating (\"3\")"
              }
            }
          },
          "kustomize": {
            "type": "object",
            "title": "ApplicationSourceKustomize holds options specific to an Application source specific to Kustomize",
            "properties": {
              "commonAnnotations": {
                "type": "object",
                "title": "CommonAnnotations is a list of additional annotations to add to rendered manifests",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "commonAnnotationsEnvsubst": {
                "type": "boolean",
                "title": "CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values"
              },
              "commonLabels": {
                "type": "object",
                "title": "CommonLabels is a list of additional labels to add to rendered manifests",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "forceCommonAnnotations": {
                "type": "boolean",
                "title": "ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps"
              },
              "forceCommonLabels": {
                "type": "boolean",
                "title": "ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps"
              },
              "images": {
                "type": "array",
                "title": "Images is a list of Kustomize image override specifications",
                "items": {
                  "type": "string"
                }
              },
              "namePrefix": {
                "type": "string",
                "title": "NamePrefix is a prefix appended to resources for Kustomize apps"
              },
              "nameSuffix": {
                "type": "string",
                "title": "NameSuffix is a suffix appended to resources for Kustomize apps"
              },
              "namespace": {
                "type": "string",
                "title": "Namespace sets the namespace that Kustomize adds to all resources"
              },
              "patches": {
                "type": "array",
                "title": "Patches is a list of Kustomize patches",
                "items": {
                  "type": "object",
                  "properties": {
                    "options": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    },
                    "patch": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "target": {
                      "type": "object",
                      "properties": {
                        "annotationSelector": {
                          "type": "string"
                        },
                        "labelSelector": {
                          "type": "string"
                        },
                        "resId": {
                          "type": "object",
                          "properties": {
                            "gvk": {
                              "type": "object",
                              "properties": {
                                "group": {
                                  "type": "string"
                                },
                                "kind": {
                                  "type": "string"
                                },
                                "version": {
                                  "type": "string"
                                }
                              }
                            },
                            "name": {
                              "type": "string"
                            },
                            "namespace": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "replicas": {
                "type": "array",
                "title": "Replicas is a list of Kustomize Replicas override specifications",
                "items": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "description": "+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true",
                      "type": "object",
                      "title": "IntOrString is a type that can hold an int32 or a string.  When used in\nJSON or YAML marshalling and unmarshalling, it produces or consumes the\ninner type.  This allows you to have, for example, a JSON field that can\naccept a name or number.\nTODO: Rename to Int32OrString",
                      "properties": {
                        "intVal": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "strVal": {
                          "type": "string"
                        },
                        "type": {
                          "type": "integer",
                          "format": "int64"
                        }
                      }
                    },
                    "name": {
                      "type": "string",
                      "title": "Name of Deployment or StatefulSet"
                    }
                  }
                }
              },
              "version": {
                "type": "string",
                "title": "Version controls which version of Kustomize to use for rendering manifests"
              }
            }
          },
          "path": {
            "description": "Path is a directory path within the Git repository, and is only valid for applications sourced from Git.",
            "type": "string"
          },
          "plugin": {
            "type": "object",
            "title": "ApplicationSourcePlugin holds options specific to config management plugins",
            "properties": {
              "env": {
                "type": "array",
                "items": {
                  "type": "object",
                  "title": "EnvEntry represents an entry in the application's environment",
                  "properties": {
                    "name": {
                      "type": "string",
                      "title": "Name is the name of the variable, usually expressed in uppercase"
                    },
                    "value": {
                      "type": "string",
                      "title": "Value is the value of the variable"
                    }
                  }
                }
              },
              "name": {
                "type": "string"
              },
              "parameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "array": {
                      "description": "Array is the value of an array type parameter.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "map": {
                      "description": "Map is the value of a map type parameter.",
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "name": {
                      "description": "Name is the name identifying a parameter.",
                      "type": "string"
                    },
                    "string": {
                      "description": "String_ is the value of a string type parameter.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "ref": {
            "description": "Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.",
            "type": "string"
          },
          "repoURL": {
            "type": "string",
            "title": "RepoURL is the URL to the repository (Git or Helm) that contains the application manifests"
          },
          "targetRevision": {
            "description": "TargetRevision defines the revision of the source to sync the application to.\nIn case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.\nIn case of Helm, this is a semver tag for the Chart's version.",
            "type": "string"
          }
        }
      }
    }
  },
  "$schema": "http://json-schema.org/schema#"
}