{
  "description": "RepositoryList is a collection of Repositories.",
  "type": "object",
  "properties": {
    "items": {
      "type": "array",
      "items": {
        "type": "object",
        "title": "Repository is a repository holding application configurations",
        "properties": {
          "bearerToken": {
            "type": "string",
            "title": "BearerToken contains the bearer token used for Git BitBucket Data Center auth at the repo server"
          },
          "connectionState": {
            "type": "object",
            "title": "ConnectionState contains information about remote resource connection state, currently used for clusters and repositories",
            "properties": {
              "attemptedAt": {
                "description": "Time is a wrapper around time.Time which supports correct\nmarshaling to YAML and JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.\n\n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "type": "string",
                "title": "Message contains human readable information about the connection status"
              },
              "status": {
                "type": "string",
                "title": "Status contains the current status indicator for the connection"
              }
            },
            "additionalProperties": false
          },
          "enableLfs": {
            "description": "EnableLFS specifies whether git-lfs support should be enabled for this repo. Only valid for Git repositories.",
            "type": "boolean"
          },
          "enableOCI": {
            "type": "boolean",
            "title": "EnableOCI specifies whether helm-oci support should be enabled for this repo"
          },
          "forceHttpBasicAuth": {
            "type": "boolean",
            "title": "ForceHttpBasicAuth specifies whether Argo CD should attempt to force basic auth for HTTP connections"
          },
          "gcpServiceAccountKey": {
            "type": "string",
            "title": "GCPServiceAccountKey specifies the service account key in JSON format to be used for getting credentials to Google Cloud Source repos"
          },
          "githubAppEnterpriseBaseUrl": {
            "type": "string",
            "title": "GithubAppEnterpriseBaseURL specifies the base URL of GitHub Enterprise installation. If empty will default to https://api.github.com"
          },
          "githubAppID": {
            "type": "integer",
            "format": "int64",
            "title": "GithubAppId specifies the ID of the GitHub app used to access the repo"
          },
          "githubAppInstallationID": {
            "type": "integer",
            "format": "int64",
            "title": "GithubAppInstallationId specifies the installation ID of the GitHub App used to access the repo"
          },
          "githubAppPrivateKey": {
            "type": "string",
            "title": "Github App Private Key PEM data"
          },
          "inheritedCreds": {
            "type": "boolean",
            "title": "Whether credentials were inherited from a credential set"
          },
          "insecure": {
            "type": "boolean",
            "title": "Insecure specifies whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys"
          },
          "insecureIgnoreHostKey": {
            "type": "boolean",
            "title": "InsecureIgnoreHostKey should not be used anymore, Insecure is favoured\nUsed only for Git repos"
          },
          "insecureOCIForceHttp": {
            "description": "InsecureOCIForceHttp specifies whether the connection to the repository uses TLS at _all_. If true, no TLS. This flag is applicable for OCI repos only.",
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "title": "Name specifies a name to be used for this repo. Only used with Helm repos"
          },
          "noProxy": {
            "type": "string",
            "title": "NoProxy specifies a list of targets where the proxy isn't used, applies only in cases where the proxy is applied"
          },
          "password": {
            "type": "string",
            "title": "Password contains the password or PAT used for authenticating at the remote repository"
          },
          "project": {
            "type": "string",
            "title": "Reference between project and repository that allows it to be automatically added as an item inside SourceRepos project entity"
          },
          "proxy": {
            "type": "string",
            "title": "Proxy specifies the HTTP/HTTPS proxy used to access the repo"
          },
          "repo": {
            "type": "string",
            "title": "Repo contains the URL to the remote repository"
          },
          "sshPrivateKey": {
            "description": "SSHPrivateKey contains the PEM data for authenticating at the repo server. Only used with Git repos.",
            "type": "string"
          },
          "tlsClientCertData": {
            "type": "string",
            "title": "TLSClientCertData contains a certificate in PEM format for authenticating at the repo server"
          },
          "tlsClientCertKey": {
            "type": "string",
            "title": "TLSClientCertKey contains a private key in PEM format for authenticating at the repo server"
          },
          "type": {
            "description": "Type specifies the type of the repo. Can be either \"git\" or \"helm. \"git\" is assumed if empty or absent.",
            "type": "string"
          },
          "useAzureWorkloadIdentity": {
            "type": "boolean",
            "title": "UseAzureWorkloadIdentity specifies whether to use Azure Workload Identity for authentication"
          },
          "username": {
            "type": "string",
            "title": "Username contains the user name used for authenticating at the remote repository"
          }
        },
        "additionalProperties": false
      }
    },
    "metadata": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and\nvarious status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "type": "object",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that\nthe server has more data available. The value is opaque and may be used to issue another request\nto the endpoint that served this list to retrieve the next set of available objects. Continuing a\nconsistent list may not be possible if the server configuration has changed or more than a few\nminutes have passed. The resourceVersion field returned when using this continue value will be\nidentical to the value in the first response, unless you have received this token from an error\nmessage.",
          "type": "string"
        },
        "remainingItemCount": {
          "type": "integer",
          "format": "int64",
          "title": "remainingItemCount is the number of subsequent items in the list which are not included in this\nlist response. If the list request contained label or field selectors, then the number of\nremaining items is unknown and the field will be left unset and omitted during serialization.\nIf the list is complete (either because it is not chunking or because this is the last chunk),\nthen there are no more remaining items and this field will be left unset and omitted during\nserialization.\nServers older than v1.15 do not set this field.\nThe intended use of the remainingItemCount is *estimating* the size of a collection. Clients\nshould not rely on the remainingItemCount to be set or to be exact.\n+optional"
        },
        "resourceVersion": {
          "type": "string",
          "title": "String that identifies the server's internal version of this object that\ncan be used by clients to determine when objects have changed.\nValue must be treated as opaque by clients and passed unmodified back to the server.\nPopulated by the system.\nRead-only.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n+optional"
        },
        "selfLink": {
          "type": "string",
          "title": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.\n+optional"
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}